openapi: 3.0.3

info:
  title: Links
  version: 1.0.0
  description: |
    このAPIは Inertia.js + Laravel に基づいています。

    全画面に渡って共通で共有されている情報（shared props）：
    - `auth.user`: 現在ログインしているユーザー
    - `flash.message`: 成功・エラー時の通知
    - `flash.status`: 通知の種類（success / error）

    これらのプロパティは Inertia の仕組みにより、自動的にすべてのレスポンスに含まれます。

servers:
  - url: https://api.example.com/

tags:
  - name: General
    description: その他のページ
  - name: Articles
    description: 記事
  - name: Users
    description: ユーザー情報
  - name: Genres
    description: ジャンル機能
  - name: Likes
    description: いいね機能
  - name: Follows
    description: フォロー機能

paths:

  /home:
    get:
      summary: ホーム画面
      tags:
        - General
      responses:
          "200":
            $ref: "#/components/responses/HomeResponse"
          '403':
            $ref: '#/components/responses/ForbiddenResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'
          '500':
            $ref: '#/components/responses/InternalServerErrorResponse'
    
  /articles/search:
    get:
      summary: 記事を検索
      tags:
        - Articles
      parameters:
        - $ref: "#/components/parameters/QueryKeyword"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/components/responses/ArticleSearchResponse"
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /articles/{id}:
    get:
      summary: 記事の詳細取得
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      security:
        - sessionAuth: []

    put:
      summary: 記事を更新
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
      
    delete:
      summary: 記事を削除
      tags:
        - Articles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: 削除成功

  /users/search:
    get:
      summary: ユーザーを検索
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/QueryKeyword"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/components/responses/UserSearchResponse"
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
  /genres/{id}/articles:
    get:
      summary: ジャンルの詳細取得(ジャンルタグから遷移する)
      tags:
        - Genres
      parameters:
        - $ref: "#/components/parameters/IdParameter"
        - $ref: "#/components/parameters/SortOrder"
        - $ref: "#/components/parameters/PageNumber"
      responses:
        "200":
          $ref: "#/components/responses/GenreResponse"
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

components:
  schemas:
    Home:
      type: object
      properties:
        articleRanking:
          type: array
          items:
            $ref: "#/components/schemas/ArticleCommon"
        userRanking:
          type: array
          items:
            $ref: "#/components/schemas/UserCommon"

    ArticleCommon:
      allOf:
        - $ref: "#/components/schemas/Article"
        - type: object
          properties:
            user:
              type: array
              items:
                $ref: "#/components/schemas/User"

    UserCommon:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            user:
              type: array
              items:
                $ref: "#/components/schemas/Follow"
  
    ArticleMutation:
      allOf:
        - $ref: "#/components/schemas/Article"
        - type: object
          properties:
            user:
              type: array
              items:
                $ref: "#/components/schemas/User"
            genres:
              type: array
              items:
                $ref: "#/components/schemas/Genre"
            comments:
              type: array
              items:
                $ref: "#/components/schemas/Comment"
    
    ArticleFilterByGenre:
      allOf:
        - $ref: "#/components/schemas/Article"
        - type: object
          properties:
            user:
              type: array
              items:
                $ref: "#/components/schemas/User"
            genres:
              type: array
              items:
                $ref: "#/components/schemas/Genre"

    Article:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: laravelの公式ドキュメントの読み方
        content:
          type: string
          example: laravelの公式ドキュメントを読む前にベストプラクティスを知ると良いでしょう
        priority:
          type: integer
          example: High
        likes:
          type: integer
          example: 100
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Tanaka Taro
        profile_text:
          type: string
          example: よろしくお願いします。田中太郎です
        email:
          type: string
          format: email
          example: hoge.example.com
        followers: 
          type: integer
          example: 100
        github_url:
          type: string
          format: uri
          example: hoge.example.com
        Twitter_url:
          type: string
          format: uri
          example: hoge.example.com
        another_url:
          type: string
          format: uri
          example: hoge.example.com
        is_admin:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Link:
      type: object
      properties:
        id:
          type: integer
          example: 1
        article_id:
          type: integer
          example: 1
        title:
          type: string
          example: Laravel公式ドキュメントの読み方について
        link_url:
          type: string
          example: hoge.example.com

    Genre:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Laravel

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        article_id:
          type: integer
          example: 1
        content:
          type: string
          example: 投稿ありがとうございます。
        created_at:
          type: string
          format: date-time

    Follow:
      type: object
      properties:
        id:
          type: integer
          example: 1
        follow_id:
          type: integer
          example: 1
        follower_id:
          type: integer
          example: 2

    Like:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        article_id:
          type: integer
          example: 1

    ErrorModel:
      description: Response Error Model.
      required:
        - code
        - message
      type: object
      properties:
        code:
          title: error code
          type: string
          example: 500
        message:
          title: error message
          type: string
          example: Internal Server Error.
  
  parameters:
    QueryKeyword:
      name: query
      in: query
      required: false
      description: 検索キーワード
      schema:
        type: string

    ArticleSortOrder:
      name: sort
      in: query
      required: false
      description: 並び順（latest または likes）
      schema:
        type: string
        enum: [latest, likes]
        default: latest
    
    UserSortOrder:
      name: sort
      in: query
      required: false
      description: 並び順（latest または likes）
      schema:
        type: string
        enum: [latest, likes]
        default: latest

    PageNumber:
      name: page
      in: query
      required: false
      description: ページ番号
      schema:
        type: integer
        default: 1
    
    IdParameter:
      name: id
      in: path
      required: true
      schema:
        type: integer

  requestBodies:
    CreateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  responses:
    HomeResponse:
      description: 成功時のレスポンス
      content:
        application/json:
          schema:
            type: object
            properties:
               props:
                 type: array
                 items:
                   $ref: "#/components/schemas/Home"

    ArticleSearchResponse:
      description: 成功時のレスポンス
      content:
        application/json:
          schema:
            type: object
            properties:
               props:
                 type: array
                 items:
                   $ref: "#/components/schemas/ArticleCommon"
               pagination:
                 type: object
                 properties:
                   current_page:
                     type: integer
                   last_page:
                     type: integer
                   total:
                     type: integer

    UserSearchResponse:
      description: 成功時のレスポンス
      content:
        application/json:
          schema:
            type: object
            properties:
               props:
                 type: array
                 items:
                   $ref: "#/components/schemas/UserCommon"
               pagination:
                 type: object
                 properties:
                   current_page:
                     type: integer
                   last_page:
                     type: integer
                   total:
                     type: integer
    
    GenreResponse:
      description: 成功時のレスポンス
      content:
        application/json:
          schema:
            type: object
            properties:
               props:
                 type: array
                 items:
                   $ref: "#/components/schemas/ArticleFilterByGenre"
               pagination:
                 type: object
                 properties:
                   current_page:
                     type: integer
                   last_page:
                     type: integer
                   total:
                     type: integer

    BadRequestResponse:
      description: | 
        Bad Request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 400
              message:
                example: Bad Request.

    UnauthorizedResponse:
      description: | 
        Unauthorized.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 401
              message:
                example: Unauthorized.

    ForbiddenResponse:
      description: | 
        Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 403
              message:
                example: Forbidden.

    NotFoundResponse:
      description: | 
        Not Found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 404
              message:
                example: Not Found.

    InternalServerErrorResponse:
      description: |-
        Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

  # 直下なの注意
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: XSRF-TOKEN
